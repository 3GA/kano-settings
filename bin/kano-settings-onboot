#!/usr/bin/env python

#
# kano-settings-onboot
#
# Copyright (C) 2014-2016 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Configure HDMI settings on boot.
#
# Also calls code to set clock config, to avoid need to an extra reboot.


'''
Usage:
    kano-settings-onboot [--dry-run] [--force]
'''


import os
import sys
import docopt

if __name__ == '__main__' and __package__ is None:
    DIR_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if DIR_PATH != '/usr':
        sys.path.insert(1, DIR_PATH)

from kano.utils import run_cmd
from kano.decorators import require_root
from kano.logging import logger

from kano_settings.system.onboot import is_model_configured, override_models, \
    calculate_is_monitor, compare_and_set_mode, compare_and_set_full_range, \
    compare_and_set_overscan, get_screen_information, ensure_correct_browser, \
    parse_screen_data, is_screen_explicitly_configured, fix_hdmi_audio
from kano_settings.system.display import get_status, get_model, set_hdmi_mode, \
    get_edid, is_mode_fallback, set_safeboot_mode
from kano_settings.boot_config import set_config_value, set_config_comment, \
    get_config_comment, get_config_value, has_config_comment, \
    enforce_pi, is_safe_boot, safe_mode_backup_config, \
    safe_mode_restore_config, remove_noobs_defaults, set_dry_run, \
    end_config_transaction, check_corrupt_config
from kano_settings.system.overclock_chip_support import \
    check_clock_config_matches_chip


SUCCESS = 0
NO_CHANGES_REQUIRED = SUCCESS
REBOOTING = SUCCESS
E_FALIED_TO_PARSE_EDID = 1

SCREEN_LOG_PATH = '/boot/screen.log'
OVERRIDES = {
    '32V3H-H6A': {'target_group': 'DMT', 'target_mode': 16, 'is_monitor': True},
    'AS4637_______': {'target_group': 'DMT', 'target_mode': 16, 'is_monitor': True},
    'BMD_HDMI': {'target_group': 'CEA', 'target_mode': 33, 'is_monitor': True},
}


def clean_init():
    # Shared reboot flag for reconfiguring for rpi1/2 and video
    reboot_now = False

    # ensure browser is configured to be one that works on the board
    ensure_correct_browser()

    # Check for corrupt config file
    if check_corrupt_config():
        logger.error("Found corrupt config file! Restoring default.")
        reboot_now = True

    # RPi1 and RPi2 have different clock rate defaults, but only one set of
    # config options. Swap the config options if we have booted on the other
    # chip.
    if check_clock_config_matches_chip():
        reboot_now = True

    # If we are in NOOBS mode, remove the config lines generated by noobs
    # Because the duplicate our config entries and override them.
    # And we expect only one instance of a config entry.
    if remove_noobs_defaults():
        logger.info("removed NOOBS defaults")
        reboot_now = True

    # Reconfigure and reboot if the user requested safe mode
    # Or if the cable appears not to have been plugged in.
    if is_mode_fallback():
        logger.warn("executing fallback boot")

        safe_mode_backup_config()
        set_safeboot_mode()

        reboot_now = True

    return reboot_now


def finalise(edid, model, status, dry_run=False):
    changes = compare_and_set_mode(edid, status) or \
            compare_and_set_full_range(edid, status) or \
            compare_and_set_overscan(edid, status)

    if not changes:
        return

    set_config_comment('kano_screen_used', model)
    end_config_transaction()

    # reboot
    if dry_run:
        logger.debug("rebooting due to config changes")
    else:
        logger.sync()
        run_cmd('kano-checked-reboot changes systemctl reboot --force')


def start_dry_run_mode():
    print "dry_run_mode"
    set_dry_run()
    logger.force_log_level('debug')
    logger.force_debug_level('debug')


@require_root(verbose=True)
def main(args):
    logger.force_log_level('info')

    dry_run = args.get('--dry-run')

    if dry_run:
        start_dry_run_mode()

    screen_data = get_screen_information(SCREEN_LOG_PATH)

    reboot_required = clean_init()

    if reboot_required:
        end_config_transaction()

        if dry_run:
            logger.debug("rebooting")
        else:
            logger.sync()
            run_cmd('kano-checked-reboot reboot_now systemctl reboot --force')

        return REBOOTING

    if is_safe_boot():
        logger.info(
            "In safe boot mode, restoring config.txt, skipping autoconfig"
        )
        safe_mode_restore_config()
        end_config_transaction()

        return NO_CHANGES_REQUIRED

    model = screen_data.get('model')
    logger.info('Screen model: {}'.format(model))

    if not args.get('--force') and is_model_configured(model):
        logger.info('The unit was configured for this model already, exiting.')
        return NO_CHANGES_REQUIRED

    edid, status = parse_screen_data(screen_data)

    if not (status and edid):
        return E_FALIED_TO_PARSE_EDID

    if is_screen_explicitly_configured(model):
        # The screen is either the same or not set at all, skip detection
        logger.info('Explicit HDMI configuration detected, exiting.')
        return NO_CHANGES_REQUIRED

    override_models(OVERRIDES, edid, model)
    calculate_is_monitor(edid)

    # output
    logger.debug(status)
    logger.debug(edid)

    fix_hdmi_audio(edid)

    finalise(edid, model, status, dry_run)

    return SUCCESS


if __name__ == '__main__' and __package__ is None:
    enforce_pi()

    ARGS = docopt.docopt(__doc__)
    sys.exit(main(ARGS))
