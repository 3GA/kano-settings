#!/usr/bin/env python

# set-kano-overscan
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# UI for share screen

from gi.repository import Gtk, Gdk
import os
import sys

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano.utils import enforce_root, run_cmd
from kano.gtk3.top_bar import TopBar
# from kano.gtk3.buttons import KanoButton
from kano.gtk3.scrolled_window import ScrolledWindow
from kano.paths import common_css_dir

overscan_pipe = "/var/tmp/overscan"

overscan_values = {
    'top': 0,
    'bottom': 0,
    'left': 0,
    'right': 0,
}


def make_button_list():

    grid = Gtk.Grid()
    grid.set_row_spacing(0)
    grid.set_size_request(500, 400)

    t_scale = Gtk.HScale.new_with_range(0, 100, 1)
    t_scale.set_value(overscan_values['top'])
    t_scale.set_size_request(400, 30)
    t_scale.connect('value_changed', adjust, 'top')
    grid.attach(t_scale, 0, 0, 1, 1)

    b_scale = Gtk.HScale.new_with_range(0, 100, 1)
    b_scale.set_value(overscan_values['bottom'])
    b_scale.set_size_request(400, 30)
    b_scale.connect('value_changed', adjust, 'bottom')
    grid.attach(b_scale, 0, 1, 1, 1)

    l_scale = Gtk.HScale.new_with_range(0, 100, 1)
    l_scale.set_value(overscan_values['left'])
    l_scale.set_size_request(400, 30)
    l_scale.connect('value_changed', adjust, 'left')
    grid.attach(l_scale, 0, 2, 1, 1)

    r_scale = Gtk.HScale.new_with_range(0, 100, 1)
    r_scale.set_value(overscan_values['right'])
    r_scale.set_size_request(400, 30)
    r_scale.connect('value_changed', adjust, 'right')
    grid.attach(r_scale, 0, 3, 1, 1)

    align = Gtk.Alignment(xalign=0.5, yalign=0.5, xscale=0, yscale=0)
    padding = 20
    align.set_padding(padding, padding, padding, padding)
    align.add(grid)

    return align


def adjust(adj, varname):
    global overscan_values

    overscan_values[varname] = int(adj.get_value())
    set_overscan_status()


def set_overscan_status():
    print overscan_values

    top = overscan_values['top']
    bottom = overscan_values['bottom']
    left = overscan_values['left']
    right = overscan_values['right']

    cmd = 'overscan {} {} {} {}'.format(top, bottom, left, right)
    run_cmd(cmd)


def save_overscan_status():
    top = overscan_values['top']
    bottom = overscan_values['bottom']
    left = overscan_values['left']
    right = overscan_values['right']

    #TODO need to write to config.txt the modified values + button for this


def get_overscan_status():
    global overscan_values

    out, _, _ = run_cmd('overscan')
    try:
        top, bottom, left, right = out.strip().split()
    except Exception:
        top = left = right = bottom = 0

    top = int(top)
    bottom = int(bottom)
    left = int(left)
    right = int(right)

    overscan_values = {
        'top': top,
        'bottom': bottom,
        'left': left,
        'right': right,
    }


class MainWindow(Gtk.Window):

    def __init__(self):
        self.width = 580
        self.height = 550

        Gtk.Window.__init__(self, title='Share')

        self.set_decorated(False)
        self.set_position(Gtk.WindowPosition.CENTER)
        self.set_resizable(False)

        grid = Gtk.Grid()
        self.add(grid)

        top_bar = TopBar('Kano Help', self.width)
        top_bar.set_close_callback(Gtk.main_quit)
        grid.attach(top_bar, 0, 0, 1, 1)

        share_list = make_button_list()
        scrolledwindow = ScrolledWindow()
        scrolledwindow.set_hexpand(True)
        scrolledwindow.set_vexpand(True)
        scrolledwindow.add_with_viewport(share_list)
        scrolledwindow.set_size_request(self.width, self.height - top_bar.height)
        grid.attach(scrolledwindow, 0, 1, 1, 1)


def main():
    enforce_root('needs to run as root')

    if not os.path.exists(overscan_pipe):
        run_cmd('mknod {} c 100 0'.format(overscan_pipe))

    get_overscan_status()
    print overscan_values

    # Create style sheet
    colourProvider = Gtk.CssProvider()
    colour_file = os.path.join(common_css_dir, 'colours.css')
    if not os.path.exists(colour_file):
        sys.exit('CSS file missing!')
    colourProvider.load_from_path(colour_file)
    cssProvider = Gtk.CssProvider()
    css_file = os.path.join(common_css_dir, 'common.css')
    if not os.path.exists(css_file):
        sys.exit('CSS file missing!')
    cssProvider.load_from_path(css_file)

    screen = Gdk.Screen.get_default()
    styleContext = Gtk.StyleContext()
    styleContext.add_provider_for_screen(screen, colourProvider, Gtk.STYLE_PROVIDER_PRIORITY_USER)
    styleContext.add_provider_for_screen(screen, cssProvider, Gtk.STYLE_PROVIDER_PRIORITY_USER)

    win = MainWindow()
    win.connect('delete-event', Gtk.main_quit)
    win.show_all()
    Gtk.main()


if __name__ == '__main__':
    main()
