#!/usr/bin/env python

import os
import sys
from kano.utils import run_cmd, delete_file, enforce_root
from kano.logging import logger
from kano_settings.display.functions import get_status, get_model, set_hdmi_mode
from kano_settings.boot_config import set_config_value, set_config_comment, get_config_comment

tvservice_path = '/usr/bin/tvservice'
config_txt_path = '/boot/config.txt'
edid_dat_path = '/tmp/edid.dat'

overrides = {
    '32V3H-H6A': {'target_group': 'DMT', 'target_mode': 16, 'is_monitor': True},
    'AS4637_______': {'target_group': 'DMT', 'target_mode': 16, 'is_monitor': True},
    'BMD_HDMI': {'target_group': 'CEA', 'target_mode': 33, 'is_monitor': True},
}


def enforce_pi():
    pi_detected = os.path.exists(tvservice_path) and os.path.exists(config_txt_path)
    if not pi_detected:
        logger.error('need to run on a Raspberry Pi')
        sys.exit()


def check_model_present():
    global model

    if get_config_comment('kano_screen_used', model):
        logger.error('monitor already set, exiting')
        sys.exit()


def read_edid():
    delete_file(edid_dat_path)
    edid_txt, _, rc = run_cmd('tvservice -d {0} && edidparser {0}'.format(edid_dat_path))
    edid_txt = edid_txt.splitlines()
    if rc != 0:
        logger.error('error getting edid dat')
        sys.exit()
    delete_file(edid_dat_path)
    return edid_txt


def parse_edid(edid_txt):
    edid = dict()

    # parsing edid
    found = False
    edid['dmt_found'] = False

    for l in edid_txt:

        # screen size
        if 'screen size' in l:
            edid['screen_size'] = int(l.split('screen size')[1].split('x')[0].strip())

        # model name
        elif 'monitor name is' in l:
            edid['model'] = l.split('monitor name is')[1].strip()

        # preferred
        elif 'found preferred' in l:
            if 'DMT' in l:
                edid['preferred_group'] = 'DMT'
            elif 'CEA' in l:
                edid['preferred_group'] = 'CEA'
            else:
                logger.error('parsing error')
                sys.exit()

            res, mode = l.split(':')[2].split('@')
            edid['preferred_res'] = res.strip()
            hz, mode = mode.split(' Hz (')
            edid['preferred_hz'] = float(hz.strip())
            edid['preferred_mode'] = int(mode[:-1])

        # moving support
        elif 'moving support for' in l:
            found_group, found_mode = l.split(' to ')[1].split(' because sink')[0].split('mode')
            edid['found_group'] = found_group.strip()
            edid['found_mode'] = int(found_mode.strip())
            found = True

        # dmt_found
        elif 'preferred_res' in edid and edid['preferred_group'] == 'CEA' and \
             edid['preferred_res'] in l and 'remained' not in l:
            if 'DMT' not in l:
                continue

            tmp_hz = float(l.split('@')[1].split('Hz')[0].strip())
            if tmp_hz != edid['preferred_hz']:
                continue

            edid['dmt_found'] = True

    # setting target mdoe
    if found:
        edid['target_group'] = edid['found_group']
        edid['target_mode'] = edid['found_mode']
    else:
        edid['target_group'] = edid['preferred_group']
        edid['target_mode'] = edid['preferred_mode']

    # is_monitor
    if edid['target_group'] == 'DMT':
        edid['is_monitor'] = True
    else:
        edid['is_monitor'] = edid['dmt_found'] or edid['screen_size'] < 60

    # always disable overscan
    edid['target_overscan'] = False

    return edid


def override_models():
    global overrides, edid, model

    for override_model, override_rules in overrides.iteritems():
        if override_model == model:
            edid['target_group'] = override_rules['target_group']
            edid['target_mode'] = override_rules['target_mode']
            edid['is_monitor'] = override_rules['is_monitor']
            return


def calculate_is_monitor():
    global edid

    edid['target_full_range'] = edid['is_monitor']


def compare_and_set_mode():
    global edid, status

    if status['group'] == edid['target_group'] and status['mode'] == edid['target_mode']:
        logger.error('mode change not needed')
        return False

    else:
        logger.error('mode change needed')
        logger.error('setting mode: {} {}'.format(edid['target_group'], edid['target_mode']))

        set_hdmi_mode(edid['target_group'], edid['target_mode'])
        return True


def compare_and_set_full_range():
    global edid, status

    if status['full_range'] == edid['target_full_range']:
        logger.error('fullrange change not needed')
        return False

    else:
        logger.error('fullrange change needed')
        logger.error('setting fullrange to: {}'.format(edid['target_full_range']))

        if edid['target_full_range']:
            set_config_value('hdmi_pixel_encoding', 2)
        else:
            set_config_value('hdmi_pixel_encoding', 0)
        return True


def compare_and_set_overscan():
    global edid, status

    if status['overscan'] == edid['target_overscan']:
        logger.error('overscan change not needed')
        return False

    else:
        logger.error('overscan change needed')
        logger.error('setting overscan to: {}'.format(edid['target_overscan']))

        if edid['target_overscan']:
            set_config_value('disable_overscan', 0)
            overscan_value = -48
        else:
            set_config_value('disable_overscan', 1)
            overscan_value = 0

        set_config_value('overscan_left', overscan_value)
        set_config_value('overscan_right', overscan_value)
        set_config_value('overscan_top', overscan_value)
        set_config_value('overscan_bottom', overscan_value)
        return True


# main program
enforce_pi()
enforce_root('Need to be root!')

# model and model comment check
model = get_model()
if '--force' not in sys.argv:
    check_model_present()

# read status
status = get_status()

# read edid
edid_txt = read_edid()
edid = parse_edid(edid_txt)

# override modes, calculate is_monitor
override_models()
calculate_is_monitor()

# output
logger.error('model: {}'.format(model))
logger.error(status)
logger.error(edid)

# changes
changes = compare_and_set_mode() or compare_and_set_full_range() or compare_and_set_overscan()

if changes:
    # write comment to config
    set_config_comment('kano_screen_used', model)

    # reboot
    run_cmd('reboot')



