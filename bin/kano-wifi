#! /usr/bin/python

# kano-wifi
#
# Copyright (C) 2013 Kano Computing Ltd.
# License:   http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# This script is a guided, interactive step-by-step process to connect to a wireless network.
# Sets return code to 0 if connected, anything else meaning an error occured.
#
# Exit codes:
#
#  1 need root privileges
#  2 no wifi dongle connected
#  3 a connection attempt is already in progress
#

import os
import sys
import subprocess
import getpass

from kano.network import IWList, is_device, is_connected, connect, is_gateway, is_internet, KwifiCache

NETWORKS_PER_PAGE = 5

class GetPasswordHideAsYouType:

    def __init__(self, enter_key=0x0d, backspace_key=0x7f, delay=.5, hide_char='*', max_length=64):
        self.password = ''
        self.enter_key = enter_key
        self.backspace_key = backspace_key
        self.delay = delay
        self.hide_char = hide_char
        self.max_length = max_length

    def __call__(self):
        import sys, tty, termios, time
        from termios import tcflush, TCIOFLUSH

        # reset password so you don't need to reinstantiate
        self.password = ''

        # setup stdin to read unbuffered so we get 1 key reads
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)

        # empty possibly typeahead keyboard entries
        tcflush(sys.stdin, TCIOFLUSH)

        try:
            tty.setraw(sys.stdin.fileno())
            while True:
                typed_char = sys.stdin.read(1)
                if ord(typed_char) == self.enter_key:
                    break
                elif ord(typed_char) == self.backspace_key:
                    # that's the backspace
                    sys.stdout.write ('\b \b')
                    sys.stdout.flush()
                    self.password = self.password[:len(self.password)-1]
                elif ord(typed_char) > 132 or ord(typed_char) < 32:
                    # Terminal bell
                    pass
                elif len(self.password) == self.max_length:
                    break
                else:
                    sys.stdout.write (typed_char)
                    sys.stdout.flush()
                    time.sleep(self.delay)
                    sys.stdout.write ('\b%c' % self.hide_char)
                    sys.stdout.flush()
                    self.password += typed_char
        finally:
            # restore terminal if we can't setup
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)

        return self.password


def print_header():
    subprocess.call(['clear'])
    print " __      __._____________.__                          _____.__"
    print "/  \    /  \__\_   _____/|__|      ____  ____   _____/ ____\__| ____"
    print "\   \/\/   /  ||    __)  |  |    _/ ___\/  _ \ /    \   __\|  |/ ___\ "
    print " \        /|  ||     \   |  |    \  \__(  <_> )   |  \  |  |  / /_/  >"
    print "  \__/\  / |__|\___  /   |__|     \___  >____/|___|  /__|  |__\___  /"
    print "       \/          \/                 \/           \/        /_____/ \n\n"


def display_networks(iwl, page=0, perpage=NETWORKS_PER_PAGE):

    start = page * perpage
    end = page * perpage + perpage
    displayed = 0

    print_header()

    for idx, netw in enumerate(iwl[start:end]):
        enctxt = 'Open'
        if netw['encryption'] != 'off':
            enctxt = 'Protected'

        print '%2d - %s - %s' % (start + idx + 1, netw['essid'], enctxt)
        displayed += 1

    return displayed


def prompt_hidden():

    protection = essid = encryption = None

    print_header()

    msg = 'Enter the name of the hidden network'
    subprocess.call(['typewriter_echo', msg, '0', '1'])
    essid = raw_input()
    while not len(essid):
        msg = 'Please enter the name of the hidden wireless network (SSID)'
        subprocess.call(['typewriter_echo', msg, '0', '1'])
        essid = raw_input()

    msg = 'Is the network protected? ([N]o, [W]EP, W[P]A) '
    subprocess.call(['typewriter_echo', msg, '0', '1'])
    protection = raw_input()
    while protection.upper() not in ('N', 'W', 'P'):
        msg = 'Please answer N, W, or P: '
        subprocess.call(['typewriter_echo', msg, '0', '1'])
        protection = raw_input()

    if protection.upper() == 'O':
        encryption = 'off'
    elif protection.upper() == 'W':
        encryption = 'wep'
    elif protection.upper() == 'P':
        encryption = 'wpa'

    return (essid, encryption)

def connect_with_retry (wiface, essid, encryption):
    '''
    Connects to a wireless network, either open or protected.
    If it's protected, it promptd for the password
    with a retry option in case the connection fails.
    Returns true if online.
    '''
    online = False
    enckey = None

    if encryption == 'off':
        # for open networks, attempt a connection and return online status
        connect(wiface, essid, encryption, enckey)
        online = is_gateway()
    else:
        # for protected networks, prompt for password, try connection
        # and give option to re-enter password in case it fails
        passprompt = GetPasswordHideAsYouType()
        retry_pass = 'Y'
        while retry_pass in ('Y', 'y', ''):
            msg = 'What\'s the network passphrase?'
            subprocess.call(['typewriter_echo', msg, '0', '1'])
            enckey = passprompt()
            while not len(enckey):
                msg = 'Please enter a valid network passphrase'
                subprocess.call(['typewriter_echo', msg, '0', '1'])
                enckey = passprompt()

            msg = '\nTrying %s, please stand by...' % essid
            subprocess.call(['typewriter_echo', msg, '0', '2'])
            connect(wiface, essid, encryption, enckey)
            online = is_gateway()
            if not online:
                msg = 'Couldn\'t connect to %s. Do you want to re-enter the passphrase? [Y/n] ' % essid
                subprocess.call(['typewriter_echo', msg, '1', '0'])
                retry_pass = raw_input()
            else:
                break

    return (online, enckey)

if __name__ == '__main__':

    # Load the cache
    wificache = KwifiCache()

    selected = online = None
    wiface = 'wlan0'
    page = 0

    #
    #  We first need to do some environment sanity checks
    #

    if not os.getuid() == 0:
        subprocess.call(['typewriter_echo', 'You need root privileges to start this app. Please try sudo', '2', '1'])
        sys.exit(1)

    if os.access('/var/run/kanoconnect.py', os.R_OK):
        subprocess.call(['typewriter_echo', 'An instance of Kanoconnect.py is running.', '2', '1'])
        subprocess.call(['typewriter_echo', 'Please wait a few seconds and try again', '2', '1'])
        sys.exit(3)

    # Process command-line parameters if given
    if len(sys.argv) > 1:

        # -s is a status request for the user to know if connected or not
        #
        if  sys.argv[1] == '-s':
            a, _, _ = is_connected(wiface)
            if not a:
                subprocess.call(['typewriter_echo', 'wireless network is not connected', '1', '2'])
            else:
                msg = 'wireless network is connected to: %s' % (a)
                subprocess.call(['typewriter_echo', msg, '1', '2'])

            sys.exit(0)

        # Any other value will be considered as the filename to a custom wpa_supplicant configuration file
        #
        else:
            wpaconf = sys.argv[1]
            connect(wiface, '', None, None, wpa_custom_file=wpaconf)
            a, _, _ = is_connected(wiface)
            if not a:
                msg = 'Couldn\'t connect using configuration %s.' % wpaconf
                subprocess.call(['typewriter_echo', msg, '1', '2'])
                sys.exit (2)
            else:
                msg = 'Great! You are connected to %s!' % a
                subprocess.call(['typewriter_echo', msg, '1', '2'])

                # cache this custom network so it is connected during next system boot
                wificache.save('', None, None, wpaconf)
                sys.exit (0)


    #
    #  Start the walkthrough process to get connected
    #

    # Step 1: intro
    print_header()

    # Step 2: check for internet connection over Ethernet or usb
    if is_internet() and not is_device(wiface):
        msg = 'Good news! It looks like you already have internet'
        subprocess.call(['typewriter_echo', msg, '1', '2'])
        sys.exit(0)

    # Step 3: check for WiFi dongle
    if not is_device(wiface):
        subprocess.call(['typewriter_echo', 'First, plug in your wifi piece.', '0', '1'])
        subprocess.call(['typewriter_echo', 'Please take into account that the system will automatically reboot.', '0', '2'])
        subprocess.call(['typewriter_echo', 'If you don\'t want to use WiFi, press [ENTER].', '2', '1'])
        # Wait for input or hardware reboot
        var = raw_input()
        sys.exit(2)
    else:
        # Step 3.1: If dongle is connected and networking is up, offer option to forget wireless network.
        netname, _, _ = is_connected(wiface)
        if netname:
            msg = 'You are connected to "%s"' % netname
            subprocess.call(['typewriter_echo', msg, '2', '1'])
            msg = 'Do you want to forget this network and choose a new one? [y/N] '
            subprocess.call(['typewriter_echo', msg, '1', '0'])
            var = raw_input()
            if var and var.upper() == 'Y':
                wificache.empty()
            else:
                sys.exit(0)

    # Step 4: WiFi dongle > show networks menu
    subprocess.call(['typewriter_echo', 'Help me find the signal.', '0', '2'])
    subprocess.call(['typewriter_echo', 'Choose a network:', '0', '2'])

    # Scan networks in range
    iwl = IWList(wiface).getList(unsecure=False, first=False)
    totalNetworks = len(iwl)
    displayed = display_networks(iwl, page)
    while not online:
        if totalNetworks == 0:
            subprocess.call(['typewriter_echo', 'I can\'t find any wireless signals. Do you want to scan again? [Y/n] ', '1', '2'])
            var = raw_input()
            if var and var.upper() != 'Y':
                subprocess.call(['typewriter_echo', 'Don\'t worry, we can still play.', '1', '2'])
                sys.exit(0)
        print 'Total networks: %d, Page: %d' % (totalNetworks, page + 1)
        print '----------'
        print ' r -> Rescan'
        if totalNetworks > (page + 1) * NETWORKS_PER_PAGE:
            print ' n -> Next page'
        if page > 0:
            print ' p -> Previous page'
        print ' h -> Connect to hidden network'
        print ' s -> Skip'
        print '----------'
        var = raw_input(" Choose a network number or option letter: ")

        if var in ('s', 'S'):
            sys.exit(1)
        elif var in ('r', 'R'):
            msg = 'Scanning...'
            subprocess.call(['typewriter_echo', msg, '0', '2'])
            iwl = IWList(wiface).getList(unsecure=False, first=False)
            page = 0
            displayed = display_networks(iwl, page)
        elif (totalNetworks > (page + 1) * NETWORKS_PER_PAGE) and var in ('n', 'N'):
            page += 1
            displayed = display_networks(iwl, page)
        elif page > 0 and var in ('p', 'P'):
            page -= 1
            displayed = display_networks(iwl, page)
        elif var in ('h', 'H'):
            # Prompt the user which hidden network we should connect to
            (essid, encryption) = prompt_hidden()

            # Request password and try to connect with password retry option
            (online, enckey) = connect_with_retry (wiface, essid, encryption)
            if not online:
                selected = None
                page = 0
                displayed = display_networks(iwl, page)
            else:
                wificache.save(essid, encryption, enckey)

        elif not var.isdigit() or not int(var) \
                in range(page * NETWORKS_PER_PAGE + 1, page * NETWORKS_PER_PAGE + displayed + 1):
            msg = 'This option is not in range! Please try again'
            subprocess.call(['typewriter_echo', msg, '1', '2'])
            displayed = display_networks(iwl, page)
        else:
            # Collect wireless connection parameters
            selected = int(var) - 1
            essid = (iwl[selected]['essid'])
            encryption = (iwl[selected]['encryption'])
            enckey = None

            print_header()
            msg = 'Let\'s connect to %s' % essid
            subprocess.call(['typewriter_echo', msg, '0', '2'])

            # Request password and try to connect with password retry option
            (online, enckey) = connect_with_retry (wiface, essid, encryption)
            if not online:
                selected = None
                page = 0
                displayed = display_networks(iwl, page)
            else:
                wificache.save(essid, encryption, enckey)

    # Step 5: ping exercise
    print_header()
    subprocess.call(['typewriter_echo', 'Excellent! let\'s check if internet is working.', '0', '2'])
    subprocess.call(['typewriter_echo', 'Type: ping www.google.com', '1', '2'])
    while True:
        var = raw_input()
        if var == 'ping www.google.com' or var == 'ping google.com':
            rc = subprocess.call(['ping', 'google.com', '-c', '1'])
            break
        else:
            subprocess.call(['typewriter_echo', 'Not the correct command, try again', '0', '2'])

    # Step 6: exit
    if not rc == 0:
        subprocess.call(['typewriter_echo', 'oops! It seems the Internet is not reachable... Don\'t worry, we can still play!', '2', '2'])
    else:
        subprocess.call(['typewriter_echo', '\nGreat! Internet is working', '2', '2'])

    sys.exit(0)
