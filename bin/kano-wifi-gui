#!/usr/bin/env python

# kano-wifi-gui.py
#
# Copyright (C) 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
# Provide a Gtk GUI frontend to wireless connections.
# An alternative to kano-wifi console tool.
#


"""
kano-wifi-gui shows the different screens for connecting and disconnecting to the internet.

Usage:
  kano-wifi-gui [--disconnect] [--plug=<socket-id>]

Options:
   -h, --help              Show this message.
   -d, --disconnect        Disconnect from the internet
   -p, --plug=<socket-id>  Put the application in a Gtk.Plug

"""


import sys
import os
import docopt

from gi.repository import Gtk, GObject

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano.gtk3.top_bar import TopBar
from kano.gtk3.apply_styles import (
    apply_common_to_screen, apply_styling_to_screen
)
from kano.gtk3.buttons import KanoButton, OrangeButton
from kano_wifi_gui.SpinnerScreen import SpinnerScreen
from kano_wifi_gui.NetworkScreen import disconnect_dialog
from kano_wifi_gui.paths import css_dir
from kano.network import is_internet, is_ethernet_plugged, is_device
from kano_settings.get_window import get_window_class
from kano.gtk3.heading import Heading


def create_wifi_gui(is_plug, socket_id):
    base_class = get_window_class(is_plug)
    wifi_gui = get_wifi_gui(base_class)
    win = wifi_gui(socket_id=socket_id)
    win.show_all()
    Gtk.main()


def get_wifi_gui(base_class):

    class KanoWifiGui(base_class):

        CSS_PATH = os.path.join(css_dir, 'kano_wifi_gui.css')
        width = 350
        height = 450

        def __init__(self, wiface='wlan0', socket_id=0):

            self.wiface = wiface
            self.network_list = []

            # Default basic styling
            apply_common_to_screen()

            # Attach specific styling
            apply_styling_to_screen(self.CSS_PATH)

            # Set window
            base_class.__init__(
                self,
                "Kano WiFi",
                self.width,
                self.height,
                socket_id
            )

            self.top_bar = TopBar("Kano WiFi")
            self.top_bar.set_prev_callback(self._go_to_spinner_screen)
            self.top_bar.set_close_callback(Gtk.main_quit)
            self.prev_handler = None
            self.connect("delete-event", Gtk.main_quit)
            self.set_keep_above(True)
            self.set_icon_name("kano-settings")
            self.set_decorated(True)

            if self._base_name == "Window":
                self.set_titlebar(self.top_bar)

            self._launch_application()

        def _launch_application(self, widget=None):
            # Decide whether application prompts user to plug in WiFi dongle
            # or tell them they have ethernet.
            # Don't want to call this function more than once

            has_internet = is_internet()
            ethernet_plugged = is_ethernet_plugged()
            dongle_is_plugged_in = is_device(self.wiface)

            # For testing
            # dongle_is_plugged_in = False
            # ethernet_plugged = True
            # has_internet = False

            if has_internet and ethernet_plugged:
                self._you_are_connected_via_ethernet()

            elif dongle_is_plugged_in:
                if has_internet:
                    self._you_have_internet_screen(self.wiface)
                else:
                    # The spinner screen takes user through to the
                    # SpinnerScreen
                    self._go_to_spinner_screen()

            else:
                self._plug_in_wifi_dongle()

        def _go_to_spinner_screen(self, widget=None, event=None):
            self.remove_main_widget()
            SpinnerScreen(self, self.wiface)

        def _plug_in_wifi_dongle(self):
            self.remove_main_widget()
            title = "You don't seem to have a wifi dongle plugged in."
            description = "Plug one in and try again"
            buttons = [
                {
                    "label": ""
                },
                {
                    "label": "TRY AGAIN",
                    "color": "green",
                    "callback": self._launch_application,
                    "type": "KanoButton"
                },
                {
                    "label": "Skip",
                    "callback": Gtk.main_quit,
                    "type": "OrangeButton"
                }
            ]

            screen = self._template(title, description, buttons)
            self.set_main_widget(screen)
            screen.show_all()

        def _you_are_connected_via_ethernet(self):
            self.remove_main_widget()
            title = "You are already connected via ethernet."
            description = "Do you still want to connect with WiFi?"
            buttons = [
                {
                    "label": "NAH",
                    "color": "red",
                    "callback": Gtk.main_quit,
                    "type": "KanoButton"
                },
                {
                    "label": "YEAH!",
                    "color": "green",
                    "callback": self._go_to_spinner_screen,
                    "type": "KanoButton"
                }
            ]

            screen = self._template(title, description, buttons)
            self.set_main_widget(screen)
            screen.show_all()

        def _you_have_internet_screen(self, wiface):
            self.remove_main_widget()
            title = "You already have internet!"
            description = "Do you want to change network?"
            buttons = [
                {
                    "label": "NAH",
                    "color": "red",
                    "callback": Gtk.main_quit,
                    "type": "KanoButton"
                },
                {
                    "label": "YEAH!",
                    "color": "green",
                    "callback": self._go_to_spinner_screen,
                    "type": "KanoButton"
                }
            ]

            screen = self._template(title, description, buttons)
            self.set_main_widget(screen)
            screen.show_all()

        def _decide(self):
            if is_device(self.wiface):
                self._go_to_spinner_screen()
            else:
                self._plug_in_wifi_dongle()

        def _template(self, title, description, buttons):
            heading = Heading(title, description)
            bbox = Gtk.ButtonBox()
            bbox.set_spacing(20)
            bbox.set_layout(Gtk.ButtonBoxStyle.CENTER)

            for b in buttons:
                label = b["label"]

                if not label:
                    gtk_button = Gtk.Label()

                else:
                    button_type = b["type"]
                    callback = b["callback"]

                    if button_type == "KanoButton":
                        color = b["color"]
                        gtk_button = KanoButton(label, color=color)
                    elif button_type == "OrangeButton":
                        gtk_button = OrangeButton(label)

                    gtk_button.connect("clicked", callback)
                bbox.pack_start(gtk_button, False, False, 0)

            vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)

            vbox.pack_start(heading.container, False, False, 0)
            vbox.pack_end(bbox, False, False, 30)
            vbox.show_all()

            return vbox

    return KanoWifiGui


if __name__ == '__main__':

    if os.getuid() != 0:
        print 'You need to run as root'
        sys.exit(1)

    args = docopt.docopt(__doc__)
    socket_id = args["--plug"]
    is_plug = (socket_id is not None)

    if args['--disconnect']:
        disconnect_dialog()
    else:
        GObject.threads_init()
        create_wifi_gui(is_plug, socket_id)
