#!/usr/bin/env python

# kano-wifi-gui.py
#
# Copyright (C) 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
# Provide a Gtk GUI frontend to wireless connections.
# An alternative to kano-wifi console tool.
#

import sys
import os
import threading

from gi.repository import Gtk, GObject, GdkPixbuf

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(0, dir_path)
    else:
        locale_path = None

from kano.gtk3.application_window import ApplicationWindow
from kano.gtk3.heading import Heading
from kano.gtk3.scrolled_window import ScrolledWindow
from kano.gtk3.buttons import KanoButton, OrangeButton
from kano.gtk3.top_bar import TopBar
from kano.gtk3.kano_dialog import KanoDialog
from kano.gtk3.apply_styles import (
    apply_common_to_screen, apply_styling_to_screen
)

from kano.logging import logger
from kano.paths import common_images_dir
import kano_settings.common as common
from kano.network import (IWList, connect, is_internet, is_connected,
                          launch_chromium)


class KanoWifiGui(ApplicationWindow):
    CSS_PATH = common.media + '/CSS/kano_wifi_gui.css'
    width = 350
    height = 405

    def __init__(self, wiface='wlan0'):
        # Default basic styling
        apply_common_to_screen()
        # Attach specific styling
        apply_styling_to_screen(self.CSS_PATH)
        # Set window
        ApplicationWindow.__init__(self, "Kano Wifi", self.width, self.height)
        self.set_decorated(True)
        self.top_bar = TopBar("Kano Wifi")
        self.prev_handler = None
        self.set_titlebar(self.top_bar)
        self.set_icon_name("kano-settings")

        # Only go through this stage if you don't have internet
        if is_internet():
            self.you_have_internet_screen(wiface)
        else:
            ConnectWiFi(self, wiface)

    def you_have_internet_screen(self, wiface):
        '''If user already has internet, let them know.
        '''
        kdialog = KanoDialog(
            "You already have internet!",
            "Do you want to change network?",
            button_dict=[
                {
                    'label': 'NO',
                    'color': 'red',
                    'return_value': 'no'
                },
                {
                    'label': 'YES',
                    'color': 'green',
                    'return_value': 'yes'
                }
            ]
        )
        response = kdialog.run()

        if response == 'yes':
            ConnectWiFi(self, wiface)
        else:
            sys.exit(0)


class ConnectWiFi(Gtk.Box):

    def __init__(self, win, _wiface):
        Gtk.Box.__init__(self)
        self.win = win
        self.wiface = _wiface
        self.win.set_main_widget(self)
        self.win.top_bar.disable_prev()

        self.width = 350
        self.height = 405

        self.create_box()

        self.win.show_all()

    def create_box(self):
        '''
        Show the screen with the different wifi networks
        '''

        self.selected_network = {}

        self.heading = Heading("Connect to WiFi", 'Choose a network')

        # Setting up the box in which the network elements are to be positioned
        self.network_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)

        # This will store the list of wifi networks
        self.network_list = []

        self.connect_btn = KanoButton('CONNECT')
        self._go_to_password_screen = self.connect_btn.connect(
            'clicked', self.first_time_connect
        )
        self.connect_btn.set_sensitive(False)
        self.connect_btn.pack_and_align()

        self.refresh_btn = KanoButton('REFRESH', color="orange")
        self.refresh_btn.connect('clicked', self.on_refresh)
        self.refresh_btn.pack_and_align()

        # refresh the list
        self._refresh_()

        # Pack all the elements into the window
        # This box is to pack everything in the window
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.add(vbox)

        sw = ScrolledWindow()
        sw.apply_styling_to_widget()
        sw.set_size_request(-1, 200)
        sw.add(self.network_box)
        sw.set_margin_right(30)
        sw.set_margin_left(30)
        sw.set_margin_bottom(30)

        # Then pack all the elements into the vbox
        vbox.pack_start(self.heading.container, False, False, 0)
        vbox.pack_start(sw, False, False, 0)

        # For now, show both connect and refresh buttons
        hbox = Gtk.Box()
        hbox.pack_start(self.connect_btn.align, True, False, 0)
        hbox.pack_start(self.refresh_btn.align, True, False, 0)

        vbox.pack_start(hbox, False, False, 0)

        self.win.show_all()

    def password_screen(self):
        '''
        Show the screen with the option of adding a password
        and connecting to a network
        '''

        # Possibly not necessary, since main window only has one widget
        for child in self.get_children():
            self.remove(child)

        network_name = self.selected_network['essid']
        heading = Heading("Connect to {}".format(network_name),
                          "Enter the password")

        image_path = common.media + "/Graphics/padlock.png"
        padlock_image = Gtk.Image.new_from_file(image_path)

        entry = Gtk.Entry()
        entry.set_visibility(False)
        entry.set_margin_top(20)
        entry.set_margin_left(60)
        entry.set_margin_right(60)
        entry.set_margin_bottom(20)
        entry.connect("key-release-event", self.set_button_sensitive)

        # TODO: fix this, this is largely repeated code
        self.connect_btn = KanoButton("CONNECT")
        self.connect_btn.connect('clicked', self.on_connect, entry)
        self.connect_btn.set_sensitive(False)
        self.connect_btn.pack_and_align()

        browser_login = OrangeButton("Browser Login")
        browser_login.connect("clicked", launch_chromium)
        proxy_login = OrangeButton("Proxy")
        proxy_login.connect("clicked", self.launch_proxy)

        orange_link_box = Gtk.Box()
        orange_link_box.pack_start(browser_login, True, False, 0)
        orange_link_box.pack_start(proxy_login, True, False, 0)

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.add(vbox)

        vbox.pack_start(heading.container, False, False, 0)
        vbox.pack_start(padlock_image, False, False, 0)
        vbox.pack_start(entry, False, False, 0)
        vbox.pack_start(orange_link_box, False, False, 0)
        vbox.pack_end(self.connect_btn.align, False, False, 0)
        self.connect_btn.set_margin_bottom(30)

        self.show_all()

    def launch_proxy(self, widget):
        os.system("kano-settings 13")

    def first_time_connect(self, widget):
        '''
        Check the selected network.  If a password is needed,
        take the user to the password screen.  Otherwise, try and connect.
        '''
        if self.selected_network['encryption'] == "off":
            essid = self.selected_network['essid']
            encryption = 'off'
            passphrase = ''
            self._connect_(essid, passphrase, encryption)
        else:
            self.password_screen()

    def _refresh_(self):

        # disable the buttons
        self.refresh_btn.set_sensitive(False)
        self.connect_btn.set_sensitive(False)

        # TODO: add a spinner

        # start thread
        # t = threading.Thread(target=self._scan_thread_, args=())
        # t.daemon=False
        # t.start()
        # print 'thread starting...'

        # FIXME: Call _scan_thread()_ asynchronously.
        # Currently it enters and endless loop filling the list
        self._scan_thread_()

        # unpack current set of networks and repack
        self._unpack_networks()
        self._pack_networks()

        # Make refresh button sensitive again
        self.refresh_btn.set_sensitive(True)
        if self.selected_network:
            self.connect_btn.set_sensitive(True)

    def _scan_thread_(self):
        # Refresh the network list
        self.network_list = []

        # Perform a network re-scan
        self.network_list = IWList(self.wiface).getList(unsecure=False,
                                                        first=False)

    def _unpack_networks(self):
        for child in self.network_box.get_children():
            self.network_box.remove(child)

    def _pack_networks(self):
        # TODO: show check mark so we know which network we are connected to

        self.network_btns = []
        network_connection = is_connected(self.wiface)

        image_path = common.media + "/Graphics/padlock.png"
        padlock_image = Gtk.Image.new_from_file(image_path)

        for network in self.network_list:

            # Network selection must be able to receive events
            network_btn = Gtk.Button()

            # Needs a box packed into it for the label and possibly
            # an icon
            box = Gtk.Box()
            network_btn.add(box)
            network_btn.get_style_context().add_class("network_btn")

            # Box must contain label of the network name
            label = Gtk.Label(network['essid'])
            box.pack_start(label, False, False, 0)

            if network['essid'] == network_connection[0]:
                tick = self.tick_icon()
                box.pack_start(tick, False, False, 0)

            network_btn.connect("clicked", self._select_network, network)

            if network['encryption'] != 'off':
                box.pack_end(padlock_image, False, False, 0)

            # Pack into the GUI for the networks
            self.network_box.pack_start(network_btn, False, False, 0)
            self.network_btns.append(network_btn)
            self.show_all()

    def _select_network(self, button, network):
        for network_btn in self.network_btns:
            network_btn.get_style_context().remove_class("selected")

        self.selected_network = network
        button.get_style_context().add_class("selected")
        self.connect_btn.set_sensitive(True)

    def _connect_(self, ssid, passphrase, encryption):
        logger.debug('Connecting to {}'.format(ssid))
        # disable the buttons
        self.refresh_btn.set_sensitive(False)
        self.connect_btn.set_sensitive(False)

        # start thread
        t = threading.Thread(
            target=self._connect_thread_,
            args=(ssid, encryption, passphrase,)
        )

        t.daemon = False
        t.start()

    def _connect_thread_(self, ssid, encryption, passphrase):
        success = connect(self.wiface, ssid, encryption, passphrase)
        logger.debug('Connecting to {} {} {}. Sucessful: {}'.format(ssid, encryption, passphrase, success))
        GObject.idle_add(self._thread_finish, success)

    def _thread_finish(self, success):
        self.refresh_btn.set_sensitive(True)
        self.connect_btn.set_sensitive(True)

        if success:
            kdialog = KanoDialog(
                "Excellent, you're connected!",
                "You can talk to the world",
                parent_window=self
            )

        else:
            kdialog = KanoDialog(
                "Oops, that password wasn't correct",
                "Do you want to try again?",
                [
                    {
                        "label": "NO",
                        "color": "red",
                        "return_value": "no"
                    },
                    {
                        "label": "YES",
                        "color": "green",
                        "return_value": "yes"
                    }
                ],
                parent_window=self
            )

        response = kdialog.run()
        if response == "yes":
            self.password_screen()
        else:
            Gtk.main_quit()

    def on_connect(self, widget, entry):
        essid = self.selected_network['essid']
        passphrase = entry.get_text()
        wpa = self.selected_network['encryption']
        self._connect_(essid, passphrase, wpa)

    def on_refresh(self, widget):
        self._refresh_()

    def set_button_sensitive(self, widget, event):
        self.connect_btn.set_sensitive(True)
        self.connect_btn.show()

    def tick_icon(self):
        '''This should return a tick image.  We use this to show which
        wifi network is already selected
        '''

        width = 24
        height = 24

        icons_path = os.path.join(common_images_dir, 'icons.png')

        tick_pixbuf = GdkPixbuf.Pixbuf.new_from_file(icons_path)

        tick_pixbuf = tick_pixbuf.new_subpixbuf(5 * 24, 0, width, height)
        tick_image = Gtk.Image()
        tick_image.set_from_pixbuf(tick_pixbuf)

        return tick_image


if __name__ == '__main__':

    if os.getuid() != 0:
        print 'You need to run as root'
        sys.exit(1)

    GObject.threads_init()

    win = KanoWifiGui()
    win.connect("delete-event", Gtk.main_quit)
    win.show_all()
    Gtk.main()
