#!/usr/bin/env python

# kano-wifi-gui.py
#
# Copyright (C) 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
# Provide a Gtk GUI frontend to wireless connections.
# An alternative to kano-wifi console tool.
#

import sys
import os
from gi.repository import Gtk, GObject

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano.gtk3.application_window import ApplicationWindow

from kano.gtk3.top_bar import TopBar
from kano.gtk3.kano_dialog import KanoDialog
from kano.gtk3.apply_styles import (
    apply_common_to_screen, apply_styling_to_screen
)
from kano_wifi_gui.SpinnerScreen import SpinnerScreen
from kano_wifi_gui.paths import css_dir
from kano.network import is_internet, is_ethernet_plugged, is_device


class KanoWifiGui(ApplicationWindow):

    CSS_PATH = os.path.join(css_dir, 'kano_wifi_gui.css')

    width = 350
    height = 450

    def __init__(self, wiface='wlan0'):

        self.wiface = wiface
        self.network_list = []

        # Default basic styling
        apply_common_to_screen()

        # Attach specific styling
        apply_styling_to_screen(self.CSS_PATH)

        # Set window
        ApplicationWindow.__init__(self, "Kano WiFi", self.width, self.height)
        self.set_decorated(True)
        self.top_bar = TopBar("Kano WiFi")
        self.top_bar.set_prev_callback(self.go_to_spinner_screen)
        self.prev_handler = None
        self.set_titlebar(self.top_bar)
        self.top_bar.set_close_callback(Gtk.main_quit)
        self.set_icon_name("kano-settings")

        # Only go through this stage if you don't have internet
        # check if a wifi dongle is plugged in
        if is_device(self.wiface):

            if is_internet():
                self.you_have_internet_screen(wiface)
            else:
                # The spinner screen takes user through to the SpinnerScreen
                self.go_to_spinner_screen()

        else:
            if is_internet():
                if is_ethernet_plugged():
                    self.you_are_connected_via_ethernet()
            else:
                self.plug_in_wifi_dongle()

    def go_to_spinner_screen(self, widget=None, event=None):
        self.remove_main_widget()
        SpinnerScreen(self, self.wiface)

    def plug_in_wifi_dongle(self):
        kdialog = KanoDialog(
            "You don't seem to have a wifi dongle plugged in.",
            "Plug one in and try again."
        )
        kdialog.run()
        sys.exit(0)

    def you_are_connected_via_ethernet(self):
        kdialog = KanoDialog(
            "You are already connected via ethernet."
        )
        kdialog.run()
        sys.exit(0)

    def you_have_internet_screen(self, wiface):
        '''If user already has internet, let them know.
        '''
        kdialog = KanoDialog(
            "You already have internet!",
            "Do you want to change network?",
            button_dict=[
                {
                    'label': 'NO',
                    'color': 'red',
                    'return_value': 'no'
                },
                {
                    'label': 'YES',
                    'color': 'green',
                    'return_value': 'yes'
                }
            ]
        )
        response = kdialog.run()

        if response == 'yes':
            self.go_to_spinner_screen(self)
        else:
            sys.exit(0)


if __name__ == '__main__':

    if os.getuid() != 0:
        print 'You need to run as root'
        sys.exit(1)

    GObject.threads_init()

    win = KanoWifiGui()
    win.connect("delete-event", Gtk.main_quit)
    Gtk.main()
