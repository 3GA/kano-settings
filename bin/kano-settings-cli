#!/usr/bin/env python

# kano-settings-cli
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Command line tool for changing settings on the Kano
#

import os
import sys
import json
from docopt import docopt

if __name__ == '__main__' and __package__ is None:
    DIR_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if DIR_PATH != '/usr':
        sys.path.insert(1, DIR_PATH)
        LOCALE_PATH = os.path.join(DIR_PATH, 'locale')
    else:
        LOCALE_PATH = None

import kano_i18n.init
kano_i18n.init.install('kano-settings', LOCALE_PATH)

from kano_settings.system.keyboard_config import set_saved_keyboard, set_keyboard
from kano_settings.system.display import get_gfx_driver, set_gfx_driver, \
    read_overscan_values, write_overscan_values
from kano_settings.config_file import get_setting

verbose = False

def print_v(string):
    if verbose:
        print string.encode('utf-8')

def parse_args():

    if args['-v'] or args['--verbose']:
        global verbose
        verbose = True

    if args['set']:
        # Need to be root to change settings
        if os.environ['LOGNAME'] != 'root':
            exit(_("Error: Settings must be executed with root privileges").encode('utf-8'))

        if args['audio']:
            if args['hdmi']:
                setting = 'hdmi'
                hdmi_enabled = True
            elif args['analogue']:
                setting = 'analogue'
                hdmi_enabled = False
            else:
                setting = 'default'
                hdmi_enabled = False

            print_v(_("setting audio to {}").format(unicode(setting)))

            # only import on use, because this is slow
            from kano_settings.system.audio import set_to_HDMI
            set_to_HDMI(hdmi_enabled)
        elif args['keyboard']:
            if args['--load']:
                set_saved_keyboard()
                print_v(_("Setting keyboard to value loaded from settings"))
            elif args['--layout']:
                layout_code = args['<layout_code>']
                layout_code_list = layout_code.split(' ')

                if len(layout_code_list) >= 1:
                    locale = layout_code_list[0]
                else:
                    locale = 'en_US'

                if len(layout_code_list) >= 2:
                    variant = layout_code_list[1]
                else:
                    variant = 'generic'

                set_keyboard(locale, variant)
                print_v(_("Setting keyboard to {} {}").format(unicode(locale), unicode(variant)))

        elif args['gfx_driver']:
            if args['enable']:
                set_gfx_driver(True)
            elif args['disable']:
                set_gfx_driver(False)

        elif args['overscan']:
            overscan_values={ 'top': args['<top>'], 'bottom': args['<bottom>'],
                              'left': args['<left>'], 'right' : args['<right>'] }

            write_overscan_values(overscan_values)


    elif args['get']:
        if args['audio']:
            print_v(
                _("Audio settings:\n\n"
                  "Audio mode: {}").format(
                    get_setting('Audio')
                )
            )
        elif args['network']:
            print_v(
                _("Network settings:\n\n"
                  "WiFi: {}, WiFi Connection Attempted: {},\n"
                  "Proxy port : {}, Proxy IP: {}, "
                  "Proxy username : {}, Proxy type : {}").format(
                    get_setting('Wifi'),
                    get_setting('Wifi-connection-attempted'),
                    get_setting('Proxy-port'),
                    get_setting('Proxy-ip'),
                    get_setting('Proxy-username'),
                    get_setting('Proxy-type')
                )
            )
        elif args['keyboard']:
            print_v(
                _("Keyboard settings:\n\n"
                  "Continent: {}, Country: {}, Variant: {}\n"
                  "(indicies - Continent: {}, Country: {}, Variant: {})").format(
                    get_setting('Keyboard-continent-human'),
                    get_setting('Keyboard-country-human'),
                    get_setting('Keyboard-variant-human'),
                    get_setting('Keyboard-continent-index'),
                    get_setting('Keyboard-country-index'),
                    get_setting('Keyboard-variant-index')
                )
            )
        elif args['gfx_driver']:
            print 'gfx_driver: {}'.format(get_gfx_driver())

        elif args['overscan']:
            print 'Overscan values: {}'.format(json.dumps(read_overscan_values()))


if __name__ == "__main__":
    args = docopt("""
    Usage:
      kano-settings-cli [-v | --verbose] get audio
      kano-settings-cli [-v | --verbose] set audio (hdmi | analogue | default)
      kano-settings-cli [-v | --verbose] get keyboard
      kano-settings-cli [-v | --verbose] set keyboard (--layout <layout_code> | --load)
      kano-settings-cli [-v | --verbose] get network
      kano-settings-cli [-v | --verbose] get gfx_driver
      kano-settings-cli [-v | --verbose] set gfx_driver (enable | disable)
      kano-settings-cli [-v | --verbose] get overscan
      kano-settings-cli [-v | --verbose] set overscan <top> <left> <bottom> <right>
      kano-settings-cli -h | --help

    Options:
      hdmi      Set the audio to HDMI
      analogue  Set the audio to use the headphone jack
      layout    The keyboard layout code
      load      Set the keyboard to the value saved by Kano-Settings
      network   Get the network info
      verbose   Verbose mode
      enable    enable gfx_driver driver
      disable   disable gfx_driver driver
    """)

    parse_args()
