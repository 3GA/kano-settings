#!/usr/bin/env python

# kano-settings
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Main window class
#

import os
import sys
from gi.repository import Gtk, GObject
GObject.threads_init()

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

import kano_settings.common as common
from kano_settings.home_screen import HomeScreen
from kano.network import is_internet
from kano.gtk3.apply_styles import apply_styling_to_screen, apply_common_to_screen
from kano.gtk3.application_window import ApplicationWindow
from kano.gtk3.kano_combobox import KanoComboBox
from kano.gtk3.scrolled_window import WideScrolledWindow

MAX_STATE = 6
init_state = -1


# Window class
class MainWindow(ApplicationWindow):
    state = 0
    last_level_visited = 0
    width = 680
    height = 405
    CSS_PATH = common.media + '/CSS/style.css'

    def __init__(self, screen_number=None):
        common.has_internet = is_internet()
        apply_styling_to_screen(self.CSS_PATH)
        apply_common_to_screen()

        # Set combobox styling to the screen
        # Is done here so we don't attach the styling multiple times when switching screens
        KanoComboBox.apply_styling_to_screen()
        WideScrolledWindow.apply_styling_to_screen()

        ApplicationWindow.__init__(self, "Settings", self.width, self.height)
        self.set_icon_name("kano-settings")
        self.connect("delete-event", Gtk.main_quit)
        HomeScreen(self, screen_number)

    def clear_win(self):
        self.remove_main_widget()

    def go_to_home(self, widget=None, event=None):
        self.clear_win()
        HomeScreen(self)


def main(screen_number=None):

    # Create windown
    MainWindow(screen_number)

    # start the GTK+ processing loop
    Gtk.main()


if __name__ == "__main__":

    if os.environ['LOGNAME'] != 'root':
        exit("Error: Settings must be executed with root privileges")

    if(len(sys.argv) > 1):
        try:
            init_state = int(sys.argv[1])
            main(init_state)
        except:
            exit("Error: incorrect argument")

    else:
        main()
