#!/usr/bin/env python

# kano-settings
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Main window class
#

import os
import sys
import subprocess
from gi.repository import Gtk, Gdk

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.append(dir_path)

import kano_settings.set_intro as set_intro
import kano_settings.set_audio as set_audio
import kano_settings.set_display as set_display
import kano_settings.config_file as config_file
import kano_settings.components.top_bar as top_bar
import kano_settings.components.apply_changes as apply_changes
import kano_settings.components.icons as icons
import kano_settings.constants as constants
import kano_settings.components.first_run as first_run
import kano_settings.components.default_intro as default_intro

win = None
zenity = None
MAX_STATE = 6


# Window class
class MainWindow(Gtk.Window):
    grid = None
    box = None
    state = 0

    def __init__(self):
        global grid, box, win

        self.last_level_visited = 0

        WINDOW_WIDTH = 650
        WINDOW_HEIGHT = 380

        # Create main window
        Gtk.Window.__init__(self, title="Kano-Settings")

        # Remove decoration
        self.set_decorated(False)
        self.set_size_request(WINDOW_WIDTH, WINDOW_HEIGHT)

        # Main container of the window
        self.grid = Gtk.Grid()

        # Content that changes between levels
        self.changeable_content = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        self.changeable_content.props.halign = Gtk.Align.CENTER

        self.top_bar = top_bar.Top_bar(WINDOW_WIDTH)

        # Init
        if config_file.read_from_file('Completed') == "1":
            self.update = apply_changes.Apply(True)
            self.update.text.set_text("Apply Changes")
            self.update.image.set_from_pixbuf(icons.Icons(5).subpixel)
            self.run_through = default_intro.Default_Intro(self)
            self.top_bar.next_button.connect("clicked", self.run_through.on_next)
            self.top_bar.prev_button.connect("clicked", self.run_through.on_prev)
            self.update.button.connect('clicked', self.run_through.update)

        else:
            self.update = apply_changes.Apply(False)
            self.update.text.set_text("Get started")
            self.update.image.set_from_pixbuf(icons.Icons(0).subpixel)
            self.run_through = first_run.First_Run(self)
            self.update.button.connect('clicked', self.run_through.update_and_next)
            set_intro.activate(self, self.changeable_content, self.update)
            self.top_bar.prev_button.connect("clicked", self.run_through.on_prev)
            self.top_bar.next_button.connect("clicked", self.run_through.on_next)

        self.grid.attach(self.top_bar.background, 0, 0, 1, 1)
        self.grid.attach(self.changeable_content, 0, 2, 1, 1)
        self.grid.set_row_spacing(0)
        self.add(self.grid)


def main():
    global win, zenity

    # Create style sheet
    cssProvider = Gtk.CssProvider()
    cssProvider.load_from_path(constants.media + '/CSS/style.css')
    screen = Gdk.Screen.get_default()
    styleContext = Gtk.StyleContext()
    styleContext.add_provider_for_screen(screen, cssProvider, Gtk.STYLE_PROVIDER_PRIORITY_USER)
    zenity.write("50\n")
    # Create windown
    win = MainWindow()
    zenity.write("75\n")
    # Link delete event
    win.connect("delete-event", close_window)
    # Display window
    win.show_all()
    zenity.write("100\n")
    # start the GTK+ processing loop
    Gtk.main()


# On closing window, will alert if any of the listed booleans are True
def close_window(event="delete-event", button=win):

    if set_audio.reboot or set_display.reboot:
        #Bring in message dialog box
        dialog = Gtk.MessageDialog(
            button, 0, Gtk.MessageType.INFO,
            Gtk.ButtonsType.OK, "So you know..."
        )
        dialog.format_secondary_text("..you will need to reboot to see all your changes")
        response = dialog.run()
        print("INFO dialog closed")

        if response == Gtk.ResponseType.OK:
            dialog.destroy()
            Gtk.main_quit()
            return
        else:
            dialog.destroy()
    else:
        Gtk.main_quit()


if __name__ == "__main__":
    if os.environ['LOGNAME'] != 'root':
        exit("Error: kano-settings must be executed with root privileges")

    zenity_cmd = ["zenity", "--progress", "--no-cancel",
                  "--title=Loading settings",
                  "--text=Loading settings...",
                  "--width=300", "--height=90", "--auto-close",
                  "--timeout=10", "--auto-kill"]
    z = subprocess.Popen(zenity_cmd, stdin=subprocess.PIPE)
    zenity = z.stdin
    zenity.write("20\n")

    main()

