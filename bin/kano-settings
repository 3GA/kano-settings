#!/usr/bin/env python

# kano-settings
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Main window class
#

import os
import sys
from gi.repository import Gtk, Gdk

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.append(dir_path)

import kano_settings.set_intro as set_intro
import kano_settings.constants as constants
import kano_settings.components.first_run as first_run
import kano_settings.components.default_intro as default_intro
from kano_settings.auto_settings import auto_settings
from kano.network import is_internet
from kano.paths import common_css_dir
from kano.gtk3.green_button import GreenButton
from kano.gtk3.top_bar import TopBar

# storing completed in kano-profile
from kano.profile.apps import load_app_state_variable

win = None
MAX_STATE = 6
init_state = -1


# Window class
class MainWindow(Gtk.Window):
    grid = None
    box = None
    state = 0

    def __init__(self):
        global grid, box, win, init_state

        self.last_level_visited = 0

        WINDOW_WIDTH = 680
        WINDOW_HEIGHT = 405

        # Create main window
        Gtk.Window.__init__(self, title="Kano-Settings")

        # Remove decoration
        self.set_decorated(False)
        self.set_size_request(WINDOW_WIDTH, WINDOW_HEIGHT)
        self.set_position(Gtk.WindowPosition.CENTER)

        self.set_resizable(False)

        # Main container of the window
        self.grid = Gtk.Grid()

        # Content that changes between levels
        self.changeable_content = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        self.changeable_content.props.halign = Gtk.Align.CENTER

        self.top_bar = TopBar(WINDOW_WIDTH)
        self.top_bar.close_button.connect("clicked", first_run.close_window)

        # Check for internet
        constants.has_internet = is_internet()

        # Init
        self.update = GreenButton()

        if load_app_state_variable('kano-settings', 'completed') == 1:
            # we define the main button here so that the text is controlled by which flow we enter
            # ie on the first run, we want the button to say Next until the last screen, in which case it says Finish
            # So we want to control this text in default_intro.py and first_run.py
            self.update.set_label("APPLY CHANGES")
            self.run_through = default_intro.Default_Intro(self, WINDOW_HEIGHT, WINDOW_WIDTH, self.top_bar.height)
            self.top_bar.disable_next()
            if init_state >= 0:
                self.run_through.go_to_level_given_state(init_state)
            else:
                self.top_bar.disable_prev()
        else:
            self.update.set_label("GET STARTED")
            self.run_through = first_run.First_Run(self)
            set_intro.activate(self, self.changeable_content, self.update)
            self.top_bar.next_button.set_image(self.top_bar.dark_next_arrow)
            self.top_bar.disable_prev()

        self.top_bar.next_button.connect("button_press_event", self.run_through.on_next)
        self.top_bar.prev_button.connect("button_press_event", self.run_through.on_prev)
        self.update.connect('button_press_event', self.run_through.update)

        self.grid.attach(self.top_bar.background, 0, 0, 1, 1)
        self.grid.attach(self.changeable_content, 0, 2, 1, 1)
        self.grid.set_row_spacing(0)
        self.add(self.grid)


def main():
    global win

    # Create style sheet
    specific_css = Gtk.CssProvider()
    specific_css.load_from_path(constants.media + '/CSS/style.css')
    common_css = Gtk.CssProvider()
    common_css_file = os.path.join(common_css_dir, 'common.css')
    common_css.load_from_path(common_css_file)
    screen = Gdk.Screen.get_default()
    styleContext = Gtk.StyleContext()
    styleContext.add_provider_for_screen(screen, specific_css, Gtk.STYLE_PROVIDER_PRIORITY_USER)
    styleContext.add_provider_for_screen(screen, common_css, Gtk.STYLE_PROVIDER_PRIORITY_USER)
    # Create windown
    win = MainWindow()
    win.connect("delete-event", Gtk.main_quit)
    # Display window
    win.show_all()
    # start the GTK+ processing loop
    Gtk.main()


if __name__ == "__main__":

    if os.environ['LOGNAME'] != 'root':
        exit("Error: kano-settings must be executed with root privileges")

    if(len(sys.argv) > 1):
        if sys.argv[1] == 'auto':
            # Apply settings
            auto_settings()
            exit()
        try:
            init_state = int(sys.argv[1])
        except:
            exit("Error: incorrect argument")
    main()

